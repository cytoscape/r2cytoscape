% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createNetwork.R
\name{createNetwork}
\alias{createNetwork}
\title{Create a network from R objects}
\usage{
createNetwork(nodes = NULL, edges = NULL, network.name = "MyNetwork",
  collection.name = "myNetworkCollection",
  base.url = "http://localhost:1234/v1", ...)
}
\arguments{
\item{nodes}{(data.frame) see details and examples below; default NULL to derive nodes from edge sources and targets}

\item{edges}{(data.frame) see details and examples below; default NULL for disconnected set of nodes}

\item{network.name}{(char) network name}

\item{collection.name}{(char) network collection name}

\item{base.url}{cyrest base url for communicating with cytoscape}

\item{...}{params for nodeSet2JSON() and edgeSet2JSON()}
}
\value{
(int) network SUID
}
\description{
Takes data frames for nodes and edges, as well as naming parameters to
generate the JSON data format required by the "networks" POST operation via CyREST.
Returns the network.suid and applies the perferred layout set in Cytoscape preferences.
}
\details{
NODES should contain a column named: id. This name can be overridden by
the arg: node.id.list. Additional columns are loaded as node attributes.
EDGES should contain columns named: source, target and interaction. These names can be overridden by
args: source.id.list, target.id.list, interaction.type.list. Additional columns
are loaded as edge attributes. The 'interaction' list can contain a single
value to apply to all rows; and if excluded altogether, the interaction type
wiil be set to "interacts with".
}
\section{Example construction}{

\preformatted{
nodes <- data.frame(id=c("node 0","node 1","node 2","node 3"),
           group=c("A","A","B","B"), # optional
           stringsAsFactors=FALSE)
edges <- data.frame(source=c("node 0","node 0","node 0","node 2"),
           target=c("node 1","node 2","node 3","node 3"),
           interaction=c("inhibits","interacts","activates","interacts"),  # optional
           stringsAsFactors=FALSE)

createNetwork(nodes,edges)
}
}

\seealso{
createSubnetwork
}
